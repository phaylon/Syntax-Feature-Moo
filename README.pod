=pod

=head1 NAME

Syntax::Feature::Moo - Provide class and role keywords for Moo

=head1 VERSION

version 0.001

=head1 SYNOPSIS

    use syntax qw( moo );

    role Named {
        has name => (is => 'ro');
    };

    class Point 1.23 {
        has x => (is => 'ro');
        has y => (is => 'ro');
        with 'Named';
        sub coord {
            my ($self) = @_;
            return sprintf '(%s,%s)', $self->x, $self->y;
        }
    };

=head1 DESCRIPTION

This syntax extension uses L<Syntax::Feature::Module> to provide a
C<class> and a C<role> keyword that will automatically load L<Moo> and
L<Moo::Role> respectively.

=head1 METHODS

=head2 install

    $class->install( %arguments );

Used by L<syntax> to install this extension into a package.

=head1 SYNTAX

The L<Syntax::Feature::Module/SYNTAX> is valid for the C<role> and C<class>
keywords as well.

=head1 OPTIONS

=head2 -as

    use syntax moo => { -as => { role => 'trait', class => 'moo' } };

    moo My::Class 2.34 { ... };

    trait My::Role  3.45 { ... };

This option needs to be a hash reference. You can set the values for
C<class> or C<role> to supply your own names for role and class blocks.

=head2 -inner

    use syntax moo => { -inner => [qw( method )] };

    class Foo {
        method class_method { ... }
    }

    role Bar {
        method role_method { ... }
    }

This option can be used to load further syntax extensions inside the
namespaced blocks. The same C<-inner> settings will be passed to both
block types.

As with L<Syntax::Feature::Module> you can specify the C<-inner> array
reference option directly if you don't have anything else to configure:

    use syntax moo => [qw( method )];

    class Foo {
        method class_method { ... }
    }

    role Bar {
        method role_method { ... }
    }

This has the same effect as the code above. These examples are using
L<Syntax::Feature::Method> to provide a C<method> keyword inside the
blocks.

=head2 -preamble

    use syntax moo => { -preamble => [
        'use namespace::clean',
        'no namespace::clean',
    ] };

    class Foo { ... }

    role Bar { ... }

The C<-preamble> is an array reference of strings that will be inserted
into the namespaced block after L<Moo> or L<Moo::Role> were invoked. The
above example would use L<namespace::clean> to clean up the namespace after
compiletime and reset it for a future manual cleanup pass.

=head1 SEE ALSO

=over

=item * L<syntax>

=item * L<Syntax::Feature::Module>

=item * L<Moo>

=back

=head1 BUGS

Please report any bugs or feature requests to bug-syntax-feature-moo@rt.cpan.org or through the web interface at:
 http://rt.cpan.org/Public/Dist/Display.html?Name=Syntax-Feature-Moo

=head1 AUTHOR

Robert 'phaylon' Sedlacek <rs@474.at>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2011 by Robert 'phaylon' Sedlacek.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

